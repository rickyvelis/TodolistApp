@page "/"
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@using InstantTodo.Shared

<PageTitle>Home</PageTitle>

<div class="container text-center">
    <div class="row justify-content-md-center">
        <ListOverview todoLists="todoLists"
                      OnSubmit="AddList" 
                      ClickedList="DisplayList"
                      ClickedListDelete="DeleteList"/>
        @if (activeId < int.MaxValue)
        {
            <TodoListView todoList="activeList" OnSubmit="AddTodoItem"
                          OnChecked="UpdateItemCheck"
                          OnDescriptionUpdate="UpdateLocalStorage"
                          OnTitleUpdate="UpdateLocalStorage"
                          OnClose="CloseList"/>
        }

    </div>
</div>

@code{
    List<TodoList> todoLists = new();
    TodoList activeList = new();

    int activeId = int.MaxValue;

    protected override async Task OnInitializedAsync()
    {
        await GetLists();
    }

    private async Task<string?> GetLocalStorageJson() => await LocalStorage.GetItemAsync<string>("data");
    private async Task UpdateLocalStorage() => await LocalStorage.SetItemAsync("data", JsonSerializer.Serialize(todoLists));
    private async Task DeleteData() => await LocalStorage.RemoveItemAsync("data");
    private TodoList GetListById(int listId) => todoLists.Where(x => x.Id == listId).FirstOrDefault();

    async Task GetLists()
    {
        string? jsonOutput = await GetLocalStorageJson();

        if (!string.IsNullOrEmpty(jsonOutput))
        {
            todoLists = JsonSerializer.Deserialize<List<TodoList>>(jsonOutput);
        }
    }


    async Task AddList(string title)
    {
        int newId = todoLists.OrderByDescending(x => x.Id).FirstOrDefault().Id + 1;

        todoLists.Add(new TodoList() { Id = newId, Title = title });
        await UpdateLocalStorage();
    }

    async Task DeleteList(int id)
    {
        //TODO NULL HANDLING
        TodoList list = todoLists.Where(x => x.Id == id).FirstOrDefault();

        todoLists.Remove(list);

        if (activeId == id) //Makes sure to close the opened todolist, when the todolist is the one that is removed.
        {
            activeId = int.MaxValue;
        }
        await UpdateLocalStorage();
    }

    private void CloseList() => activeId = int.MaxValue;



    private void DisplayList(int id)
    {
        //ADD NULL HANDLING
        TodoList list = todoLists.Where(x => x.Id == id).FirstOrDefault();

        activeList = list;
        this.activeId = id;
    }

    async Task AddTodoItem(KeyValuePair<int, string> todoTitleWithListId)
    {
        int listId = todoTitleWithListId.Key;
        string title = todoTitleWithListId.Value;

        //Get the list by given ID
        //ADD NULL HANDLING
        TodoList list = GetListById(listId);

        int newTaskId = 0;
        var item = list.TodoItems.OrderByDescending(x => x.Id).FirstOrDefault();
        if(item != null)
        {
            newTaskId = item.Id + 1;
        }

        //Create TodoItem object with the given title
        TodoItem newItem = new()
            {
                Id = newTaskId,
                Title = title
            };

        list.TodoItems.Add(newItem);
        list.Updated = DateTime.Now;

        await UpdateLocalStorage();
    }

    async Task UpdateItemCheck(KeyValuePair<int, int> listIdAndItemId)
    {
        int listId = listIdAndItemId.Key;
        int itemId = listIdAndItemId.Value;

        TodoList list = GetListById(listId);
        TodoItem item = list.TodoItems.Where(x => x.Id == itemId).FirstOrDefault();

        //toggle IsDone
        item.IsDone = !item.IsDone;
        list.Updated = DateTime.Now;

        await UpdateLocalStorage();

    }
}